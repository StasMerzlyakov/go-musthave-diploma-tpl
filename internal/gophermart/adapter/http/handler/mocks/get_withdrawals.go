// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/adapter/http/handler/balance (interfaces: GetWithdrawalsApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockGetWithdrawalsApp is a mock of GetWithdrawalsApp interface.
type MockGetWithdrawalsApp struct {
	ctrl     *gomock.Controller
	recorder *MockGetWithdrawalsAppMockRecorder
}

// MockGetWithdrawalsAppMockRecorder is the mock recorder for MockGetWithdrawalsApp.
type MockGetWithdrawalsAppMockRecorder struct {
	mock *MockGetWithdrawalsApp
}

// NewMockGetWithdrawalsApp creates a new mock instance.
func NewMockGetWithdrawalsApp(ctrl *gomock.Controller) *MockGetWithdrawalsApp {
	mock := &MockGetWithdrawalsApp{ctrl: ctrl}
	mock.recorder = &MockGetWithdrawalsAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetWithdrawalsApp) EXPECT() *MockGetWithdrawalsAppMockRecorder {
	return m.recorder
}

// Withdrawals mocks base method.
func (m *MockGetWithdrawalsApp) Withdrawals(arg0 context.Context) ([]domain.WithdrawalData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0)
	ret0, _ := ret[0].([]domain.WithdrawalData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockGetWithdrawalsAppMockRecorder) Withdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockGetWithdrawalsApp)(nil).Withdrawals), arg0)
}
