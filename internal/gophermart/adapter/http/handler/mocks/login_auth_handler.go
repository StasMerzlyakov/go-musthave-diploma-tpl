// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/adapter/http/handler/auth (interfaces: LogingApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockLogingApp is a mock of LogingApp interface.
type MockLogingApp struct {
	ctrl     *gomock.Controller
	recorder *MockLogingAppMockRecorder
}

// MockLogingAppMockRecorder is the mock recorder for MockLogingApp.
type MockLogingAppMockRecorder struct {
	mock *MockLogingApp
}

// NewMockLogingApp creates a new mock instance.
func NewMockLogingApp(ctrl *gomock.Controller) *MockLogingApp {
	mock := &MockLogingApp{ctrl: ctrl}
	mock.recorder = &MockLogingAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogingApp) EXPECT() *MockLogingAppMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockLogingApp) Login(arg0 context.Context, arg1 *domain.AuthentificationData) (domain.TokenString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(domain.TokenString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockLogingAppMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockLogingApp)(nil).Login), arg0, arg1)
}
