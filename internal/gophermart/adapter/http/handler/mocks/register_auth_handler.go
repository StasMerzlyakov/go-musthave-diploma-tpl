// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/adapter/http/handler/auth (interfaces: RegisterApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockRegisterApp is a mock of RegisterApp interface.
type MockRegisterApp struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterAppMockRecorder
}

// MockRegisterAppMockRecorder is the mock recorder for MockRegisterApp.
type MockRegisterAppMockRecorder struct {
	mock *MockRegisterApp
}

// NewMockRegisterApp creates a new mock instance.
func NewMockRegisterApp(ctrl *gomock.Controller) *MockRegisterApp {
	mock := &MockRegisterApp{ctrl: ctrl}
	mock.recorder = &MockRegisterAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterApp) EXPECT() *MockRegisterAppMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockRegisterApp) Login(arg0 context.Context, arg1 *domain.AuthentificationData) (domain.TokenString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(domain.TokenString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockRegisterAppMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRegisterApp)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockRegisterApp) Register(arg0 context.Context, arg1 *domain.RegistrationData) (domain.TokenString, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(domain.TokenString)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterAppMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterApp)(nil).Register), arg0, arg1)
}
