// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/adapter/in/http/handler/order (interfaces: GetOrderApp)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockGetOrderApp is a mock of GetOrderApp interface.
type MockGetOrderApp struct {
	ctrl     *gomock.Controller
	recorder *MockGetOrderAppMockRecorder
}

// MockGetOrderAppMockRecorder is the mock recorder for MockGetOrderApp.
type MockGetOrderAppMockRecorder struct {
	mock *MockGetOrderApp
}

// NewMockGetOrderApp creates a new mock instance.
func NewMockGetOrderApp(ctrl *gomock.Controller) *MockGetOrderApp {
	mock := &MockGetOrderApp{ctrl: ctrl}
	mock.recorder = &MockGetOrderAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetOrderApp) EXPECT() *MockGetOrderAppMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockGetOrderApp) All(arg0 context.Context) ([]domain.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]domain.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockGetOrderAppMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockGetOrderApp)(nil).All), arg0)
}
