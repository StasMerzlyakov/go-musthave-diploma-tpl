// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/app (interfaces: AuthStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthStorage is a mock of AuthStorage interface.
type MockAuthStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAuthStorageMockRecorder
}

// MockAuthStorageMockRecorder is the mock recorder for MockAuthStorage.
type MockAuthStorageMockRecorder struct {
	mock *MockAuthStorage
}

// NewMockAuthStorage creates a new mock instance.
func NewMockAuthStorage(ctrl *gomock.Controller) *MockAuthStorage {
	mock := &MockAuthStorage{ctrl: ctrl}
	mock.recorder = &MockAuthStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthStorage) EXPECT() *MockAuthStorageMockRecorder {
	return m.recorder
}

// GetUserData mocks base method.
func (m *MockAuthStorage) GetUserData(arg0 context.Context, arg1 string) (*domain.LoginData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", arg0, arg1)
	ret0, _ := ret[0].(*domain.LoginData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockAuthStorageMockRecorder) GetUserData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockAuthStorage)(nil).GetUserData), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockAuthStorage) RegisterUser(arg0 context.Context, arg1 *domain.LoginData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockAuthStorageMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockAuthStorage)(nil).RegisterUser), arg0, arg1)
}
