// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/StasMerzlyakov/gophermart/internal/gophermart/app (interfaces: BalanceStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/StasMerzlyakov/gophermart/internal/gophermart/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockBalanceStorage is a mock of BalanceStorage interface.
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage.
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance.
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockBalanceStorage) Balance(arg0 context.Context, arg1 int) (*domain.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balance indicates an expected call of Balance.
func (mr *MockBalanceStorageMockRecorder) Balance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockBalanceStorage)(nil).Balance), arg0, arg1)
}

// GetByStatus mocks base method.
func (m *MockBalanceStorage) GetByStatus(arg0 context.Context, arg1 domain.OrderStatus) ([]domain.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", arg0, arg1)
	ret0, _ := ret[0].([]domain.OrderData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockBalanceStorageMockRecorder) GetByStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockBalanceStorage)(nil).GetByStatus), arg0, arg1)
}

// UpdateBalanceByOrder mocks base method.
func (m *MockBalanceStorage) UpdateBalanceByOrder(arg0 context.Context, arg1 *domain.UserBalance, arg2 *domain.OrderData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceByOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceByOrder indicates an expected call of UpdateBalanceByOrder.
func (mr *MockBalanceStorageMockRecorder) UpdateBalanceByOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceByOrder", reflect.TypeOf((*MockBalanceStorage)(nil).UpdateBalanceByOrder), arg0, arg1, arg2)
}

// UpdateBalanceByWithdraw mocks base method.
func (m *MockBalanceStorage) UpdateBalanceByWithdraw(arg0 context.Context, arg1 *domain.UserBalance, arg2 *domain.WithdrawalData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceByWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceByWithdraw indicates an expected call of UpdateBalanceByWithdraw.
func (mr *MockBalanceStorageMockRecorder) UpdateBalanceByWithdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceByWithdraw", reflect.TypeOf((*MockBalanceStorage)(nil).UpdateBalanceByWithdraw), arg0, arg1, arg2)
}

// Withdrawals mocks base method.
func (m *MockBalanceStorage) Withdrawals(arg0 context.Context, arg1 int) ([]domain.WithdrawalData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0, arg1)
	ret0, _ := ret[0].([]domain.WithdrawalData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockBalanceStorageMockRecorder) Withdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockBalanceStorage)(nil).Withdrawals), arg0, arg1)
}
